# **Full Stack CRUD Application with RTK Query (Users Profile)**

Let's create a **full-stack CRUD application** to store **user profiles** using **React + Redux Toolkit Query** on the frontend and **Express + MongoDB** on the backend.

### **Backend Setup (Express + MongoDB + TypeScript)**

#### 1. Backend Folder Structure:

```
backend/
├── src/
│   ├── config/
│   │   └── db.ts
│   ├── controllers/
│   │   └── userController.ts
│   ├── models/
│   │   └── userModel.ts
│   ├── routes/
│   │   └── userRoutes.ts
│   └── server.ts
├── .env
├── tsconfig.json
├── package.json
├── package-lock.json
└── nodemon.json
```

    #### 2. Install Backend Dependencies

    ```bash
    npm install express mongoose dotenv cors
    npm install --save-dev typescript ts-node @types/express @types/node @types/cors nodemon
    ```

    #### 3. TypeScript Configuration

    **`tsconfig.json`:**

    ```json
    {
    "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "outDir": "./dist"
    },
    "include": ["src/**/*"]
    }
    ```

    #### 4. MongoDB Configuration

    **File: `src/config/db.ts`**

    ```typescript
    import mongoose from 'mongoose';
    import dotenv from 'dotenv';

    dotenv.config();

    const connectDB = async () => {
    try {
    await mongoose.connect(process.env.MONGO_URI as string);
    console.log('MongoDB connected');
    } catch (error) {
    console.error('MongoDB connection error', error);
    process.exit(1);
    }
    };

    export default connectDB;
    ```

    **File: `.env`**

    ```env
    MONGO_URI=mongodb+srv://<username>:<password>@cluster.mongodb.net/myDatabase?retryWrites=true&w=majority
PORT=5000
```

    #### 5. User Model

    **File: `src/models/userModel.ts`**

    ```typescript
    import mongoose, { Document, Schema } from 'mongoose';

    export interface IUser extends Document {
    name: string;
    email: string;
    bio: string;
    }

    const userSchema: Schema = new Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    bio: { type: String, required: false },
    });

    const User = mongoose.model<IUser>('User', userSchema);
        export default User;
        ```

        #### 6. User Controller

        **File: `src/controllers/userController.ts`**

        ```typescript
        import { Request, Response } from 'express';
        import User, { IUser } from '../models/userModel';

        // @desc Get all users
        export const getUsers = async (req: Request, res: Response) => {
        try {
        const users = await User.find();
        res.status(200).json(users);
        } catch (error) {
        res.status(500).json({ message: 'Server Error' });
        }
        };

        // @desc Create a new user
        export const createUser = async (req: Request, res: Response) => {
        const { name, email, bio } = req.body;
        try {
        const newUser: IUser = new User({ name, email, bio });
        const createdUser = await newUser.save();
        res.status(201).json(createdUser);
        } catch (error) {
        res.status(500).json({ message: 'Error creating user' });
        }
        };

        // @desc Update user profile
        export const updateUser = async (req: Request, res: Response) => {
        const { id } = req.params;
        const { name, email, bio } = req.body;

        try {
        const user = await User.findById(id);
        if (user) {
        user.name = name;
        user.email = email;
        user.bio = bio;
        const updatedUser = await user.save();
        res.json(updatedUser);
        } else {
        res.status(404).json({ message: 'User not found' });
        }
        } catch (error) {
        res.status(500).json({ message: 'Error updating user' });
        }
        };

        // @desc Delete user
        export const deleteUser = async (req: Request, res: Response) => {
        const { id } = req.params;
        try {
        const user = await User.findById(id);
        if (user) {
        await user.remove();
        res.json({ message: 'User deleted' });
        } else {
        res.status(404).json({ message: 'User not found' });
        }
        } catch (error) {
        res.status(500).json({ message: 'Error deleting user' });
        }
        };
        ```

        #### 7. User Routes

        **File: `src/routes/userRoutes.ts`**

        ```typescript
        import express from 'express';
        import { getUsers, createUser, updateUser, deleteUser } from '../controllers/userController';

        const router = express.Router();

        router.route('/').get(getUsers).post(createUser);
        router.route('/:id').put(updateUser).delete(deleteUser);

        export default router;
        ```

        #### 8. Express Server Setup

        **File: `src/server.ts`**

        ```typescript
        import express from 'express';
        import cors from 'cors';
        import dotenv from 'dotenv';
        import connectDB from './config/db';
        import userRoutes from './routes/userRoutes';

        dotenv.config();
        connectDB();

        const app = express();

        app.use(cors());
        app.use(express.json());

        app.use('/api/users', userRoutes);

        const PORT = process.env.PORT || 5000;
        app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
        ```

        ---

        ### **Frontend Setup (React + RTK Query + Redux Toolkit)**

        #### 1. Frontend Folder Structure:

        ```
        frontend/
        ├── src/
        │   ├── components/
        │   │   └── UserList.tsx
        │   ├── features/
        │   │

        └── users/
        │   │       ├── redux/
        │   │       │   └── userApi.ts
        │   │       ├── services/
        │   │       │   └── userService.ts
        │   ├── store/
        │   │   └── store.ts
        │   ├── App.tsx
        │   └── main.tsx
        ├── tsconfig.json
        ├── package.json
        └── package-lock.json
        ```

        #### 2. Install Frontend Dependencies:

        ```bash
        npm install @reduxjs/toolkit react-redux axios
        ```

        #### 3. Setup RTK Query for User API

        1. **User API Slice (RTK Query)**:
        - Path: `src/features/users/redux/userApi.ts`

        ```typescript
        import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

        export interface User {
        _id: string;
        name: string;
        email: string;
        bio: string;
        }

        export const userApi = createApi({
        reducerPath: 'userApi',
        baseQuery: fetchBaseQuery({ baseUrl: 'http://localhost:5000/api/' }),
        endpoints: (builder) => ({
        getUsers: builder.query<User[], void>({
        query: () => 'users',
        }),
        addUser: builder.mutation<User, Partial<User>>({
            query: (user) => ({
            url: 'users',
            method: 'POST',
            body: user,
            }),
            }),
            updateUser: builder.mutation<User, { id: string; user: Partial<User> }>({
                query: ({ id, user }) => ({
                url: `users/${id}`,
                method: 'PUT',
                body: user,
                }),
                }),
                deleteUser: builder.mutation<{ message: string }, string>({
                query: (id) => ({
                url: `users/${id}`,
                method: 'DELETE',
                }),
                }),
                }),
                });

                export const { useGetUsersQuery, useAddUserMutation, useUpdateUserMutation, useDeleteUserMutation } = userApi;
                ```

                2. **Configure Store**:
                - Path: `src/store/store.ts`

                ```typescript
                import { configureStore } from '@reduxjs/toolkit';
                import { userApi } from '../features/users/redux/userApi';

                const store = configureStore({
                reducer: {
                [userApi.reducerPath]: userApi.reducer,
                },
                middleware: (getDefaultMiddleware) =>
                getDefaultMiddleware().concat(userApi.middleware),
                });

                export type RootState = ReturnType<typeof store.getState>;
                    export type AppDispatch = typeof store.dispatch;

                    export default store;
                    ```

                    3. **User List Component**:
                    - Path: `src/components/UserList.tsx`

                    ```typescript
                    import React from 'react';
                    import { useGetUsersQuery, useDeleteUserMutation } from '../features/users/redux/userApi';

                    const UserList = () => {
                    const { data: users, error, isLoading } = useGetUsersQuery();
                    const [deleteUser] = useDeleteUserMutation();

                    if (isLoading) return <p>Loading...</p>;
                    if (error) return <p>Error fetching users</p>;

                    return (
                    <div>
                        <h2>User List</h2>
                        <ul>
                            {users?.map((user) => (
                            <li key={user._id}>
                            <h3>{user.name}</h3>
                            <p>{user.email}</p>
                            <button onClick={() => deleteUser(user._id)}>Delete</button>
                    </li>
                    ))}
                </ul>
            </div>
            );
            };

            export default UserList;
            ```

            4. **App Component**:
            - Path: `src/App.tsx`

            ```typescript
            import React from 'react';
            import UserList from './components/UserList';

            const App = () => {
            return (
            <div className="App">
                <h1>User Profiles</h1>
                <UserList />
            </div>
            );
            };

            export default App;
            ```

            ---

            ### **Final Steps to Run the Application**

            1. **Run the Backend**:

            ```bash
            cd backend
            npm run dev
            ```

            2. **Run the Frontend**:

            ```bash
            cd frontend
            npm run dev
            ```

            Open the frontend at `http://localhost:3000`. The app will fetch, create, update, and delete user profiles, fully utilizing **RTK Query** to handle the frontend's API interaction and caching.

            ### **Key Features of RTK Query in This Application**:
            - **Efficient Caching**: RTK Query caches all user data and only re-fetches if the data becomes invalidated.
            - **Simplified Data Fetching**: The `useGetUsersQuery`, `useAddUserMutation`, `useDeleteUserMutation`, and `useUpdateUserMutation` hooks handle the API requests without manually managing loading or error states.
            - **Auto-Generated Hooks**: The API slice automatically provides reusable hooks, making it easier to manage CRUD operations for users.

            This setup shows how you can build a scalable, performant, and modern full-stack CRUD application using **RTK Query** and **Redux Toolkit** for efficient data fetching and management.